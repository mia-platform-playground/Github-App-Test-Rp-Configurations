apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-16-template
  annotations:
    mia-platform.eu/version: 13.6.0
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    fluentbit.io/parser: pino
  labels:
    app: nodejs-16-template
    app.kubernetes.io/name: nodejs-16-template
    app.kubernetes.io/version: latest
    app.kubernetes.io/component: custom
    app.kubernetes.io/part-of: github-app-test
    app.kubernetes.io/managed-by: mia-platform
    mia-platform.eu/stage: development
    mia-platform.eu/tenant: rocket-playground
    mia-platform.eu/log-type: mia-json
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs-16-template
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 1
  template:
    metadata:
      annotations:
        mia-platform.eu/version: 13.6.0
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
        fluentbit.io/parser: pino
      labels:
        app: nodejs-16-template
        app.kubernetes.io/name: nodejs-16-template
        app.kubernetes.io/version: latest
        app.kubernetes.io/component: custom
        app.kubernetes.io/part-of: github-app-test
        app.kubernetes.io/managed-by: mia-platform
        mia-platform.eu/stage: development
        mia-platform.eu/tenant: rocket-playground
        mia-platform.eu/log-type: mia-json
    spec:
      imagePullSecrets:
        - name: nexus-gcloud
      terminationGracePeriodSeconds: 30
      containers:
        - name: nodejs-16-template
          image: nexus.mia-platform.eu/github-app-test/nodejs-16-template
          imagePullPolicy: Always
          resources:
            limits:
              memory: 150Mi
              cpu: 100m
            requests:
              memory: 150Mi
              cpu: 100m
          volumeMounts: []
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          args: []
          env:
            - name: LOG_LEVEL
              value: '{{LOG_LEVEL}}'
            - name: MICROSERVICE_GATEWAY_SERVICE_NAME
              value: microservice-gateway
            - name: TRUSTED_PROXIES
              value: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
            - name: HTTP_PORT
              value: '3000'
            - name: USERID_HEADER_KEY
              value: miauserid
            - name: GROUPS_HEADER_KEY
              value: miausergroups
            - name: CLIENTTYPE_HEADER_KEY
              value: client-type
            - name: BACKOFFICE_HEADER_KEY
              value: isbackoffice
            - name: USER_PROPERTIES_HEADER_KEY
              value: miauserproperties
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              port: http
              path: /-/ready
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              port: http
              path: /-/healthz
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
      volumes: []
      hostIPC: false
      hostNetwork: false
      hostPID: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault
